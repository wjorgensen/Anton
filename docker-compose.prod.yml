version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: anton-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: anton
      POSTGRES_USER: anton
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anton -d anton"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - anton-network
    command: >
      postgres
        -c max_connections=100
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=64MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=4MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB
        -c max_worker_processes=8
        -c max_parallel_workers_per_gather=4
        -c max_parallel_workers=8
        -c max_parallel_maintenance_workers=4
        -c log_statement=none
        -c log_min_duration_statement=1000
        -c log_checkpoints=on
        -c log_connections=on
        -c log_disconnections=on
        -c log_lock_waits=on

  redis:
    image: redis:7-alpine
    container_name: anton-redis-prod
    restart: always
    command: >
      redis-server
        --appendonly yes
        --requirepass ${REDIS_PASSWORD}
        --maxmemory 512MB
        --maxmemory-policy allkeys-lru
        --tcp-keepalive 60
        --timeout 300
        --save 900 1
        --save 300 10
        --save 60 10000
        --stop-writes-on-bgsave-error no
        --rdbcompression yes
        --rdbchecksum yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - anton-network

  orchestrator:
    build:
      context: ./orchestration
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: anton-orchestrator-prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://anton:${DB_PASSWORD}@postgres:5432/anton?connection_limit=20&pool_timeout=60
      SHADOW_DATABASE_URL: postgresql://anton:${DB_PASSWORD}@postgres:5432/anton_shadow
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      PORT: 3002
      WEBHOOK_URL: ${WEBHOOK_URL}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: production
      SENTRY_TRACES_SAMPLE_RATE: 0.1
      LOG_LEVEL: info
      LOG_DIR: /app/logs
      REDIS_CACHE_TTL: 3600
      DB_POOL_MIN: 2
      DB_POOL_MAX: 20
      DB_POOL_IDLE_TIMEOUT: 30000
      DB_POOL_ACQUIRE_TIMEOUT: 60000
    ports:
      - "3002:3002"
    volumes:
      - ./projects:/app/projects
      - ./hooks:/app/hooks
      - ./agents:/app/agents:ro
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - anton-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  visual-editor:
    build:
      context: ./anton-visual-editor
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
        NODE_ENV: production
    container_name: anton-visual-editor-prod
    restart: always
    depends_on:
      orchestrator:
        condition: service_healthy
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3000:3000"
    networks:
      - anton-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  planning-service:
    build:
      context: ./planning-service
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: anton-planning-service-prod
    restart: always
    depends_on:
      orchestrator:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3003
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      ORCHESTRATOR_URL: http://orchestrator:3002
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: production
    ports:
      - "3003:3003"
    volumes:
      - ./agents/library:/app/agents:ro
    networks:
      - anton-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  nginx:
    image: nginx:alpine
    container_name: anton-nginx-prod
    restart: always
    depends_on:
      - visual-editor
      - orchestrator
      - planning-service
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
      - nginx_cache_prod:/var/cache/nginx
    networks:
      - anton-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: anton-prometheus-prod
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    networks:
      - anton-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: anton-grafana-prod
    restart: always
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource
      GF_SECURITY_ADMIN_USER: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_SNAPSHOTS_EXTERNAL_ENABLED: false
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data_prod:/var/lib/grafana
    networks:
      - anton-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: anton-backup-prod
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - anton-network
    profiles:
      - backup
    command: /backup.sh
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Log aggregation
  fluentd:
    image: fluentd:v1.16-debian-1
    container_name: anton-fluentd-prod
    restart: always
    volumes:
      - ./logs:/var/log/anton:ro
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf:ro
    networks:
      - anton-network
    profiles:
      - logging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

networks:
  anton-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/anton/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/anton/redis
  nginx_cache_prod:
    driver: local
  prometheus_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/anton/prometheus
  grafana_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/anton/grafana