version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: anton-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: anton
      POSTGRES_USER: anton
      POSTGRES_PASSWORD: ${DB_PASSWORD:-defaultpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anton -d anton"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - anton-network

  redis:
    image: redis:7-alpine
    container_name: anton-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultredispassword}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - anton-network

  orchestrator:
    build:
      context: ./orchestration
      dockerfile: Dockerfile
    container_name: anton-orchestrator
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://anton:${DB_PASSWORD:-defaultpassword}@postgres:5432/anton
      REDIS_URL: redis://:${REDIS_PASSWORD:-defaultredispassword}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      PORT: 3002
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:3002/webhook}
    ports:
      - "3002:3002"
    volumes:
      - ./projects:/app/projects
      - ./hooks:/app/hooks
      - ./agents:/app/agents:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - anton-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  visual-editor:
    build:
      context: ./anton-visual-editor
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3002}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:3002}
    container_name: anton-visual-editor
    restart: unless-stopped
    depends_on:
      - orchestrator
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3002}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:3002}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    ports:
      - "3000:3000"
    networks:
      - anton-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  planning-service:
    build:
      context: ./planning-service
      dockerfile: Dockerfile
    container_name: anton-planning-service
    restart: unless-stopped
    depends_on:
      - orchestrator
      - redis
    environment:
      NODE_ENV: production
      PORT: 3003
      REDIS_URL: redis://:${REDIS_PASSWORD:-defaultredispassword}@redis:6379
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      ORCHESTRATOR_URL: http://orchestrator:3002
    ports:
      - "3003:3003"
    volumes:
      - ./agents/library:/app/agents:ro
    networks:
      - anton-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional services for production
  nginx:
    image: nginx:alpine
    container_name: anton-nginx
    restart: unless-stopped
    depends_on:
      - visual-editor
      - orchestrator
      - planning-service
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - anton-network
    profiles:
      - production

  # Monitoring stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: anton-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - anton-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: anton-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    networks:
      - anton-network
    profiles:
      - monitoring

networks:
  anton-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local