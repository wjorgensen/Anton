{
  "name": "Testing Agent Hook Configuration",
  "description": "Hook configuration for testing agents (Jest, Pytest, Playwright, etc.)",
  "hooks": {
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo $(date +%s) > $CLAUDE_PROJECT_DIR/.start_time"
          },
          {
            "type": "command",
            "command": "echo '{\"total\": 0, \"passed\": 0, \"failed\": 0}' > $CLAUDE_PROJECT_DIR/.test_results.json"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --exit-code $EXIT_CODE --session-id $SESSION_ID",
            "timeout": 30000,
            "retryOnFailure": true
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$COMMAND\" =~ (jest|pytest|go test|npm test|yarn test|vitest|playwright|cypress) ]]; then $CLAUDE_PROJECT_DIR/hooks/parse-test-results.sh --node-id $NODE_ID --command \"$COMMAND\" --output $CLAUDE_PROJECT_DIR/test_output.log --session-id $SESSION_ID; fi",
            "continueOnError": false
          }
        ]
      },
      {
        "matcher": "Write|Edit",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$FILE_PATH\" =~ \\.(test|spec)\\.(js|ts|jsx|tsx|py|go)$ ]]; then echo \"Test file modified: $FILE_PATH\" >> $CLAUDE_PROJECT_DIR/test_changes.log; fi",
            "continueOnError": true
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo \"User test adjustment: $USER_INPUT\" >> $CLAUDE_PROJECT_DIR/test_adjustments.log",
            "continueOnError": true
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$MESSAGE\" =~ \"test\" ]]; then curl -s -X POST -H 'Content-Type: application/json' -d '{\"nodeId\": \"$NODE_ID\", \"type\": \"test-update\", \"message\": \"$MESSAGE\"}' http://localhost:3002/api/hooks/notification; fi",
            "continueOnError": true
          }
        ]
      }
    ]
  },
  "testParsers": {
    "jest": {
      "pattern": "Test Suites:.*\\d+ passed",
      "outputFile": "coverage/test-results.json"
    },
    "pytest": {
      "pattern": "=+.*passed|failed|error",
      "outputFile": ".pytest_cache/test-results.json"
    },
    "playwright": {
      "pattern": "Running.*test",
      "outputFile": "test-results/results.json"
    }
  },
  "environment": {
    "ORCHESTRATOR_URL": "http://localhost:3002",
    "ENABLE_COVERAGE": "true",
    "FAIL_ON_TEST_FAILURE": "true",
    "AUTO_RETRY_FAILED_TESTS": "true",
    "MAX_TEST_RETRIES": "2"
  },
  "security": {
    "allowedCommands": [
      "stop.sh",
      "parse-test-results.sh",
      "echo",
      "curl",
      "test",
      "date"
    ],
    "maxExecutionTime": 60000,
    "sandboxed": true
  }
}