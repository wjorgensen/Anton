{
  "name": "Integration Agent Hook Configuration",
  "description": "Hook configuration for integration agents (Git, API, Database)",
  "hooks": {
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo $(date +%s) > $CLAUDE_PROJECT_DIR/.start_time"
          },
          {
            "type": "command",
            "command": "git -C $CLAUDE_PROJECT_DIR status > $CLAUDE_PROJECT_DIR/.git_initial_status.txt 2>&1 || echo 'Not a git repository'",
            "continueOnError": true
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --exit-code $EXIT_CODE --session-id $SESSION_ID",
            "timeout": 30000,
            "retryOnFailure": true
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$COMMAND\" =~ ^git ]]; then echo \"Git command: $COMMAND\" >> $CLAUDE_PROJECT_DIR/git_operations.log; fi",
            "continueOnError": true
          },
          {
            "type": "command",
            "command": "if [[ \"$COMMAND\" =~ (merge|rebase|cherry-pick) ]]; then curl -s -X POST -H 'Content-Type: application/json' -d '{\"nodeId\": \"$NODE_ID\", \"operation\": \"$COMMAND\"}' http://localhost:3002/api/hooks/git-operation; fi",
            "continueOnError": true
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$MESSAGE\" =~ (conflict|merge) ]]; then curl -s -X POST -H 'Content-Type: application/json' -d '{\"nodeId\": \"$NODE_ID\", \"type\": \"integration-alert\", \"message\": \"$MESSAGE\"}' http://localhost:3002/api/hooks/notification; fi",
            "continueOnError": true
          }
        ]
      }
    ]
  },
  "gitConfig": {
    "autoResolveConflicts": false,
    "defaultMergeStrategy": "recursive",
    "signCommits": false,
    "verifyCommits": true
  },
  "apiConfig": {
    "timeout": 30000,
    "retryOnFailure": true,
    "maxRetries": 3
  },
  "databaseConfig": {
    "backupBeforeMigration": true,
    "rollbackOnError": true,
    "validateSchema": true
  },
  "environment": {
    "ORCHESTRATOR_URL": "http://localhost:3002",
    "GIT_AUTHOR_NAME": "Anton Integration Agent",
    "GIT_AUTHOR_EMAIL": "anton@example.com",
    "ENABLE_GIT_HOOKS": "true",
    "API_RATE_LIMIT": "100"
  },
  "security": {
    "allowedCommands": [
      "stop.sh",
      "echo",
      "curl",
      "git",
      "date"
    ],
    "maxExecutionTime": 60000,
    "sandboxed": true,
    "gitRestrictions": {
      "allowedOperations": ["add", "commit", "merge", "rebase", "cherry-pick", "status", "diff", "log"],
      "blockedOperations": ["push", "pull", "fetch", "remote"],
      "requireSignedCommits": false
    }
  }
}