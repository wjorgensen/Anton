{
  "id": "3e451a8b-133d-4689-bb4b-07c85c4fa1a9",
  "version": 1,
  "name": "Nodejs api project",
  "description": "Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.",
  "created": "2025-08-26T17:22:41.539Z",
  "modified": "2025-08-26T17:22:41.539Z",
  "nodes": [
    {
      "id": "node-1",
      "agentId": "express-setup",
      "label": "Express Setup",
      "category": "setup",
      "instructions": "Execute express-setup agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {
        "projectName": "create-a-simple",
        "features": [
          "api",
          "testing",
          "database"
        ],
        "testing": true
      },
      "position": {
        "x": -169.71389404504066,
        "y": 60
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 600,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 10
    },
    {
      "id": "node-2",
      "agentId": "nodejs-backend",
      "label": "Nodejs Backend",
      "category": "execution",
      "instructions": "Execute nodejs-backend agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {},
      "position": {
        "x": 259.3196059134889,
        "y": -140
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 15
    },
    {
      "id": "node-3",
      "agentId": "go-developer",
      "label": "Go Developer",
      "category": "execution",
      "instructions": "Execute go-developer agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {
        "features": [
          "api",
          "testing",
          "database"
        ],
        "technology": {
          "backend": [
            "nodejs",
            "go"
          ],
          "testing": [
            "jest"
          ]
        }
      },
      "position": {
        "x": 205.47434012376397,
        "y": 180
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 30
    },
    {
      "id": "node-4",
      "agentId": "database-developer",
      "label": "Database Developer",
      "category": "execution",
      "instructions": "Execute database-developer agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {
        "features": [
          "api",
          "testing",
          "database"
        ],
        "technology": {
          "backend": [
            "nodejs",
            "go"
          ],
          "testing": [
            "jest"
          ]
        }
      },
      "position": {
        "x": 205.8646023424551,
        "y": 500
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 30
    },
    {
      "id": "node-5",
      "agentId": "api-developer",
      "label": "Api Developer",
      "category": "execution",
      "instructions": "Execute api-developer agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {
        "features": [
          "api",
          "testing",
          "database"
        ],
        "technology": {
          "backend": [
            "nodejs",
            "go"
          ],
          "testing": [
            "jest"
          ]
        }
      },
      "position": {
        "x": 182.55835444744167,
        "y": 820
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 30
    },
    {
      "id": "node-6",
      "agentId": "jest-tester",
      "label": "Jest Tester",
      "category": "testing",
      "instructions": "Execute jest-tester agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {
        "testingLevel": "basic",
        "coverage": 60
      },
      "position": {
        "x": 684.6755829319915,
        "y": -40
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 15
    },
    {
      "id": "node-7",
      "agentId": "go-test-runner",
      "label": "Go Test Runner",
      "category": "testing",
      "instructions": "Execute go-test-runner agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {
        "testingLevel": "basic",
        "coverage": 60
      },
      "position": {
        "x": 642.8278212272495,
        "y": 280
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 10
    },
    {
      "id": "node-8",
      "agentId": "git-merger",
      "label": "Git Merger",
      "category": "integration",
      "instructions": "Execute git-merger agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {},
      "position": {
        "x": 1054.1593176084432,
        "y": -140
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 5
    },
    {
      "id": "node-9",
      "agentId": "api-integrator",
      "label": "Api Integrator",
      "category": "integration",
      "instructions": "Execute api-integrator agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {},
      "position": {
        "x": 1113.7173015861888,
        "y": 180
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 15
    },
    {
      "id": "node-10",
      "agentId": "db-migrator",
      "label": "Db Migrator",
      "category": "integration",
      "instructions": "Execute db-migrator agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {},
      "position": {
        "x": 1045.2041764553137,
        "y": 500
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 10
    },
    {
      "id": "node-11",
      "agentId": "summarizer",
      "label": "Summarizer",
      "category": "utility",
      "instructions": "Execute summarizer agent for project: Create a simple REST API with Node.js and Express for managing todos with basic CRUD operations and Jest unit tests.\n\nTechnology stack: {\"backend\":[\"nodejs\",\"go\"],\"testing\":[\"jest\"]}\nRequired features: api, testing, database\nPreferences: {}",
      "inputs": {},
      "position": {
        "x": 1489.7138940450407,
        "y": 60
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 5
    }
  ],
  "edges": [
    {
      "id": "edge-1",
      "source": "node-1",
      "target": "node-2",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-2",
      "source": "node-1",
      "target": "node-3",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-3",
      "source": "node-1",
      "target": "node-4",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-4",
      "source": "node-1",
      "target": "node-5",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-5",
      "source": "node-2",
      "target": "node-6",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-6",
      "source": "node-3",
      "target": "node-7",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-7",
      "source": "node-6",
      "target": "node-8",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-8",
      "source": "node-6",
      "target": "node-9",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-9",
      "source": "node-6",
      "target": "node-10",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-10",
      "source": "node-7",
      "target": "node-8",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-11",
      "source": "node-7",
      "target": "node-9",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-12",
      "source": "node-7",
      "target": "node-10",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-13",
      "source": "node-8",
      "target": "node-11",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-14",
      "source": "node-9",
      "target": "node-11",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-15",
      "source": "node-10",
      "target": "node-11",
      "condition": {
        "type": "success"
      }
    }
  ],
  "metadata": {
    "projectType": "api",
    "estimatedTotalTime": 75,
    "estimatedTotalTokens": 550000,
    "environment": {
      "NODE_ENV": "development",
      "PROJECT_TYPE": "api"
    },
    "secrets": [
      "API_KEY",
      "API_SECRET"
    ]
  }
}