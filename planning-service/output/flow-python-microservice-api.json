{
  "id": "78c002f6-6a26-4fe7-a91d-ce3e7e9b8d68",
  "version": 1,
  "name": "Angular api project",
  "description": "Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.",
  "created": "2025-08-26T17:22:41.535Z",
  "modified": "2025-08-26T17:22:41.535Z",
  "nodes": [
    {
      "id": "node-1",
      "agentId": "angular-setup",
      "label": "Angular Setup",
      "category": "setup",
      "instructions": "Execute angular-setup agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {
        "projectName": "create-a-fastapi",
        "features": [
          "authentication",
          "database",
          "api",
          "testing",
          "deployment",
          "documentation",
          "performance"
        ],
        "database": "postgres",
        "authentication": "nextauth",
        "testing": true
      },
      "position": {
        "x": -47.78519544871813,
        "y": -154.8958659172058
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 600,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 10
    },
    {
      "id": "node-2",
      "agentId": "angular-developer",
      "label": "Angular Developer",
      "category": "execution",
      "instructions": "Execute angular-developer agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {
        "features": [
          "authentication",
          "database",
          "api",
          "testing",
          "deployment",
          "documentation",
          "performance"
        ],
        "technology": {
          "frontend": [
            "angular"
          ],
          "backend": [
            "python"
          ],
          "database": [
            "postgres",
            "mongodb",
            "redis"
          ],
          "testing": [
            "pytest"
          ]
        }
      },
      "position": {
        "x": 304.16292720993744,
        "y": -258.6458659172058
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 30
    },
    {
      "id": "node-3",
      "agentId": "nodejs-backend",
      "label": "Nodejs Backend",
      "category": "execution",
      "instructions": "Execute nodejs-backend agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": 367.3782210657671,
        "y": 90.10413408279419
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 15
    },
    {
      "id": "node-4",
      "agentId": "python-developer",
      "label": "Python Developer",
      "category": "execution",
      "instructions": "Execute python-developer agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {
        "features": [
          "authentication",
          "database",
          "api",
          "testing",
          "deployment",
          "documentation",
          "performance"
        ],
        "technology": {
          "frontend": [
            "angular"
          ],
          "backend": [
            "python"
          ],
          "database": [
            "postgres",
            "mongodb",
            "redis"
          ],
          "testing": [
            "pytest"
          ]
        }
      },
      "position": {
        "x": 327.3495140445555,
        "y": 385.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 30
    },
    {
      "id": "node-5",
      "agentId": "database-developer",
      "label": "Database Developer",
      "category": "execution",
      "instructions": "Execute database-developer agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {
        "features": [
          "authentication",
          "database",
          "api",
          "testing",
          "deployment",
          "documentation",
          "performance"
        ],
        "technology": {
          "frontend": [
            "angular"
          ],
          "backend": [
            "python"
          ],
          "database": [
            "postgres",
            "mongodb",
            "redis"
          ],
          "testing": [
            "pytest"
          ]
        }
      },
      "position": {
        "x": 315.97074341974485,
        "y": 705.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 30
    },
    {
      "id": "node-6",
      "agentId": "api-developer",
      "label": "Api Developer",
      "category": "execution",
      "instructions": "Execute api-developer agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {
        "features": [
          "authentication",
          "database",
          "api",
          "testing",
          "deployment",
          "documentation",
          "performance"
        ],
        "technology": {
          "frontend": [
            "angular"
          ],
          "backend": [
            "python"
          ],
          "database": [
            "postgres",
            "mongodb",
            "redis"
          ],
          "testing": [
            "pytest"
          ]
        }
      },
      "position": {
        "x": 361.2556842092707,
        "y": 1025.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 30
    },
    {
      "id": "node-7",
      "agentId": "pytest-runner",
      "label": "Pytest Runner",
      "category": "testing",
      "instructions": "Execute pytest-runner agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {
        "testingLevel": "basic",
        "coverage": 60
      },
      "position": {
        "x": 514.5590965321874,
        "y": -86.77086591720581
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 10
    },
    {
      "id": "node-8",
      "agentId": "k6-performance",
      "label": "K6 Performance",
      "category": "testing",
      "instructions": "Execute k6-performance agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": -47.78519544871813,
        "y": 165.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 1200,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 25
    },
    {
      "id": "node-9",
      "agentId": "git-merger",
      "label": "Git Merger",
      "category": "integration",
      "instructions": "Execute git-merger agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": 707.7874960312284,
        "y": -345.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 5
    },
    {
      "id": "node-10",
      "agentId": "api-integrator",
      "label": "Api Integrator",
      "category": "integration",
      "instructions": "Execute api-integrator agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": 836.7579951159015,
        "y": 156.3541340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 15
    },
    {
      "id": "node-11",
      "agentId": "db-migrator",
      "label": "Db Migrator",
      "category": "integration",
      "instructions": "Execute db-migrator agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": 737.2492081641539,
        "y": 385.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 10
    },
    {
      "id": "node-12",
      "agentId": "docker-builder",
      "label": "Docker Builder",
      "category": "integration",
      "instructions": "Execute docker-builder agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": 677.2188963330541,
        "y": 705.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 600,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 15
    },
    {
      "id": "node-13",
      "agentId": "ci-cd-runner",
      "label": "Ci Cd Runner",
      "category": "integration",
      "instructions": "Execute ci-cd-runner agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {
        "testingLevel": "basic",
        "coverage": 60
      },
      "position": {
        "x": 694.9332453255522,
        "y": 1025.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 10
    },
    {
      "id": "node-14",
      "agentId": "security-review",
      "label": "Security Review",
      "category": "review",
      "instructions": "Execute security-review agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": 1037.7851954487182,
        "y": -175.10423183441162
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 10
    },
    {
      "id": "node-15",
      "agentId": "documentation",
      "label": "Documentation",
      "category": "utility",
      "instructions": "Execute documentation agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": 1367.7851954487182,
        "y": -5.104231834411621
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 10
    },
    {
      "id": "node-16",
      "agentId": "deployment",
      "label": "Deployment",
      "category": "utility",
      "instructions": "Execute deployment agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": 1161.6764647560858,
        "y": 385.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 20
    },
    {
      "id": "node-17",
      "agentId": "summarizer",
      "label": "Summarizer",
      "category": "utility",
      "instructions": "Execute summarizer agent for project: Create a FastAPI microservice for data processing with PostgreSQL database, Redis caching, comprehensive pytest testing, Docker containerization, and API documentation. Include authentication and rate limiting.\n\nTechnology stack: {\"frontend\":[\"angular\"],\"backend\":[\"python\"],\"database\":[\"postgres\",\"mongodb\",\"redis\"],\"testing\":[\"pytest\"]}\nRequired features: authentication, database, api, testing, deployment, documentation, performance\nPreferences: {\"documentation\":true}",
      "inputs": {},
      "position": {
        "x": 1129.8239829101472,
        "y": 705.1041340827942
      },
      "config": {
        "retryOnFailure": true,
        "maxRetries": 3,
        "timeout": 300,
        "requiresReview": false
      },
      "status": "pending",
      "estimatedTime": 5
    }
  ],
  "edges": [
    {
      "id": "edge-1",
      "source": "node-1",
      "target": "node-2",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-2",
      "source": "node-1",
      "target": "node-3",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-3",
      "source": "node-1",
      "target": "node-4",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-4",
      "source": "node-1",
      "target": "node-5",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-5",
      "source": "node-1",
      "target": "node-6",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-6",
      "source": "node-4",
      "target": "node-7",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-7",
      "source": "node-7",
      "target": "node-9",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-8",
      "source": "node-7",
      "target": "node-10",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-9",
      "source": "node-7",
      "target": "node-11",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-10",
      "source": "node-7",
      "target": "node-12",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-11",
      "source": "node-7",
      "target": "node-13",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-12",
      "source": "node-8",
      "target": "node-9",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-13",
      "source": "node-8",
      "target": "node-10",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-14",
      "source": "node-8",
      "target": "node-11",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-15",
      "source": "node-8",
      "target": "node-12",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-16",
      "source": "node-8",
      "target": "node-13",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-17",
      "source": "node-9",
      "target": "node-14",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-18",
      "source": "node-9",
      "target": "node-15",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-19",
      "source": "node-9",
      "target": "node-16",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-20",
      "source": "node-9",
      "target": "node-17",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-21",
      "source": "node-10",
      "target": "node-14",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-22",
      "source": "node-10",
      "target": "node-15",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-23",
      "source": "node-10",
      "target": "node-16",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-24",
      "source": "node-10",
      "target": "node-17",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-25",
      "source": "node-11",
      "target": "node-14",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-26",
      "source": "node-11",
      "target": "node-15",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-27",
      "source": "node-11",
      "target": "node-16",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-28",
      "source": "node-11",
      "target": "node-17",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-29",
      "source": "node-12",
      "target": "node-14",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-30",
      "source": "node-12",
      "target": "node-15",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-31",
      "source": "node-12",
      "target": "node-16",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-32",
      "source": "node-12",
      "target": "node-17",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-33",
      "source": "node-13",
      "target": "node-14",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-34",
      "source": "node-13",
      "target": "node-15",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-35",
      "source": "node-13",
      "target": "node-16",
      "condition": {
        "type": "success"
      }
    },
    {
      "id": "edge-36",
      "source": "node-13",
      "target": "node-17",
      "condition": {
        "type": "success"
      }
    }
  ],
  "metadata": {
    "projectType": "api",
    "estimatedTotalTime": 110,
    "estimatedTotalTokens": 850000,
    "environment": {
      "NODE_ENV": "development",
      "PROJECT_TYPE": "api",
      "DATABASE_URL": "postgresql://user:password@localhost:5432/dbname",
      "AUTH_SECRET": "development-secret",
      "NEXTAUTH_URL": "http://localhost:3000"
    },
    "secrets": [
      "AUTH_SECRET",
      "JWT_SECRET",
      "DATABASE_URL",
      "DB_PASSWORD",
      "API_KEY",
      "API_SECRET"
    ]
  }
}