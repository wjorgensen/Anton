{
  "id": "vue-developer",
  "name": "Vue.js Developer Agent",
  "category": "execution",
  "type": "vue-developer",
  "version": "1.0.0",
  "description": "Specialized agent for developing Vue.js components, features, and applications with Composition API, modern patterns, and best practices",
  "icon": "vue",
  "color": "#4FC08D",
  "instructions": {
    "base": "You are an expert Vue.js developer. Your role is to implement Vue components, features, and business logic using Vue 3 Composition API, TypeScript, and modern Vue patterns. You write clean, maintainable, and testable code.",
    "contextual": "Implement the following Vue feature: {{featureDescription}}. Requirements: {{requirements}}. UI Framework: {{uiFramework}}. Use Composition API and follow Vue best practices."
  },
  "claudeMD": "# Vue.js Developer Agent\n\nExpert in Vue.js development with:\n- Vue 3 Composition API\n- Single File Components (SFC)\n- Pinia state management\n- Vue Router navigation\n- Vite build tooling\n- TypeScript integration\n- Testing with Vitest/Vue Test Utils\n- Performance optimization\n\n## Core Competencies\n- Reactive data and computed properties\n- Custom composables development\n- Component composition patterns\n- Slot and provide/inject patterns\n- Form handling and validation\n- Event handling and communication\n- Lifecycle hooks management\n- CSS modules and styling\n\n## Development Standards\n- Use Composition API over Options API\n- Implement proper TypeScript types\n- Write unit tests for components\n- Follow Vue style guide\n- Optimize bundle size with tree shaking\n- Document components with JSDoc",
  "inputs": [
    {
      "name": "featureDescription",
      "type": "string",
      "required": true,
      "description": "Description of the Vue feature to implement"
    },
    {
      "name": "requirements",
      "type": "array",
      "required": true,
      "description": "List of specific requirements for the feature"
    },
    {
      "name": "uiFramework",
      "type": "string",
      "required": false,
      "description": "UI framework being used (vuetify, quasar, element-plus, custom)",
      "default": "custom"
    },
    {
      "name": "targetFiles",
      "type": "array",
      "required": false,
      "description": "Specific files to modify or create"
    },
    {
      "name": "dependencies",
      "type": "object",
      "required": false,
      "description": "External dependencies needed for the feature"
    }
  ],
  "outputs": [
    {
      "name": "implementedFiles",
      "type": "array",
      "description": "List of files created or modified"
    },
    {
      "name": "components",
      "type": "array",
      "description": "List of Vue components created"
    },
    {
      "name": "composables",
      "type": "array",
      "description": "Custom composables developed"
    },
    {
      "name": "tests",
      "type": "array",
      "description": "Test files created"
    },
    {
      "name": "documentation",
      "type": "string",
      "description": "Documentation of implemented features"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type execution"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-changes.sh --node-id $NODE_ID --tool $TOOL_NAME --category execution"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/sync-preview.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-execution.sh --node-id $NODE_ID --command $COMMAND"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/save-work.sh --node-id $NODE_ID --context-reset true"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/handle-notification.sh --node-id $NODE_ID --type execution"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 30,
    "estimatedTokens": 110000,
    "requiresGPU": false,
    "maxRetries": 3,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["vue-setup", "vite-vue-setup", "nuxt-setup"],
  "tags": ["vue", "frontend", "javascript", "typescript", "components", "composition-api", "ui", "development"]
}