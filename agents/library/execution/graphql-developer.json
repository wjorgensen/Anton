{
  "id": "graphql-developer",
  "name": "GraphQL Developer Agent",
  "category": "execution",
  "type": "graphql-developer",
  "version": "1.0.0",
  "description": "Specialized agent for developing GraphQL APIs, schemas, resolvers, and client integrations with modern GraphQL patterns and best practices",
  "icon": "graphql",
  "color": "#E10098",
  "instructions": {
    "base": "You are an expert GraphQL developer. Your role is to implement GraphQL schemas, resolvers, mutations, subscriptions, and client integrations using modern GraphQL patterns, performance optimization, and best practices. You write efficient and scalable GraphQL APIs.",
    "contextual": "Implement the following GraphQL feature: {{featureDescription}}. Requirements: {{requirements}}. Server: {{server}}. Client: {{client}}. Follow GraphQL best practices and schema design principles."
  },
  "claudeMD": "# GraphQL Developer Agent\n\nExpert in GraphQL development with:\n- Apollo Server/Client integration\n- Schema definition and design\n- Resolver implementation\n- DataLoader for N+1 prevention\n- Subscription handling\n- Schema stitching/federation\n- Code generation tools\n- Performance optimization\n\n## Core Competencies\n- GraphQL schema design\n- Query, mutation, subscription resolvers\n- Authentication and authorization\n- Error handling and validation\n- Caching strategies\n- Real-time subscriptions\n- Schema federation\n- Client-side state management\n\n## Development Standards\n- Design schema-first approach\n- Implement efficient resolvers\n- Use DataLoader for batching\n- Handle errors gracefully\n- Optimize query performance\n- Document schema with descriptions",
  "inputs": [
    {
      "name": "featureDescription",
      "type": "string",
      "required": true,
      "description": "Description of the GraphQL feature to implement"
    },
    {
      "name": "requirements",
      "type": "array",
      "required": true,
      "description": "List of specific requirements for the feature"
    },
    {
      "name": "server",
      "type": "string",
      "required": false,
      "description": "GraphQL server (apollo-server, graphql-yoga, mercurius, hot-chocolate)",
      "default": "apollo-server"
    },
    {
      "name": "client",
      "type": "string",
      "required": false,
      "description": "GraphQL client (apollo-client, relay, urql, graphql-request)",
      "default": "apollo-client"
    },
    {
      "name": "database",
      "type": "string",
      "required": false,
      "description": "Database type (postgres, mongodb, mysql, prisma)",
      "default": "postgres"
    },
    {
      "name": "targetFiles",
      "type": "array",
      "required": false,
      "description": "Specific files to modify or create"
    }
  ],
  "outputs": [
    {
      "name": "implementedFiles",
      "type": "array",
      "description": "List of files created or modified"
    },
    {
      "name": "schemas",
      "type": "array",
      "description": "GraphQL schema files created"
    },
    {
      "name": "resolvers",
      "type": "array",
      "description": "Resolver functions implemented"
    },
    {
      "name": "mutations",
      "type": "array",
      "description": "Mutation resolvers created"
    },
    {
      "name": "subscriptions",
      "type": "array",
      "description": "Subscription resolvers implemented"
    },
    {
      "name": "tests",
      "type": "array",
      "description": "Test files created"
    },
    {
      "name": "documentation",
      "type": "string",
      "description": "Documentation of implemented features"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type execution"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-changes.sh --node-id $NODE_ID --tool $TOOL_NAME --category execution"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/sync-preview.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-execution.sh --node-id $NODE_ID --command $COMMAND"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/save-work.sh --node-id $NODE_ID --context-reset true"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/handle-notification.sh --node-id $NODE_ID --type execution"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 35,
    "estimatedTokens": 125000,
    "requiresGPU": false,
    "maxRetries": 3,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["apollo-server-setup", "graphql-setup", "prisma-setup"],
  "tags": ["graphql", "api", "apollo", "schema", "resolvers", "subscriptions", "real-time", "development"]
}