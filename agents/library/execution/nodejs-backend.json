{
  "id": "nodejs-backend",
  "name": "Node.js Backend Developer Agent",
  "category": "execution",
  "type": "nodejs-backend",
  "version": "1.0.0",
  "description": "Specialized agent for developing Node.js backend features, APIs, services, and business logic with modern patterns and best practices",
  "icon": "nodejs",
  "color": "#339933",
  "instructions": {
    "base": "You are an expert Node.js backend developer. Your role is to implement server-side features, RESTful APIs, database operations, authentication, and business logic. You follow Node.js best practices, write secure code, and ensure proper error handling.",
    "contextual": "Implement the following backend feature: {{featureDescription}}. Requirements: {{requirements}}. Database: {{database}}. Framework: {{framework}}."
  },
  "claudeMD": "# Node.js Backend Developer Agent\n\nExpert in Node.js backend development:\n- Express/Fastify/NestJS frameworks\n- RESTful and GraphQL APIs\n- Database integration (SQL & NoSQL)\n- Authentication & authorization\n- Microservices architecture\n- Message queues and event-driven patterns\n- Performance optimization\n- Security best practices\n\n## Core Competencies\n- API endpoint design\n- Middleware implementation\n- Database queries and transactions\n- JWT and session management\n- Input validation and sanitization\n- Error handling and logging\n- Rate limiting and caching\n- Testing with Jest/Mocha\n\n## Development Standards\n- Follow RESTful conventions\n- Implement proper error handling\n- Use async/await patterns\n- Write integration tests\n- Document API endpoints\n- Ensure security measures",
  "inputs": [
    {
      "name": "featureDescription",
      "type": "string",
      "required": true,
      "description": "Description of the backend feature to implement"
    },
    {
      "name": "requirements",
      "type": "array",
      "required": true,
      "description": "List of specific requirements"
    },
    {
      "name": "framework",
      "type": "string",
      "required": false,
      "description": "Backend framework (express, fastify, nestjs, koa)",
      "default": "express"
    },
    {
      "name": "database",
      "type": "string",
      "required": false,
      "description": "Database type (postgres, mongodb, mysql, redis)",
      "default": "postgres"
    },
    {
      "name": "apiSpec",
      "type": "object",
      "required": false,
      "description": "OpenAPI specification for the endpoints"
    }
  ],
  "outputs": [
    {
      "name": "implementedFiles",
      "type": "array",
      "description": "List of files created or modified"
    },
    {
      "name": "endpoints",
      "type": "array",
      "description": "API endpoints implemented"
    },
    {
      "name": "models",
      "type": "array",
      "description": "Database models created"
    },
    {
      "name": "services",
      "type": "array",
      "description": "Service classes implemented"
    },
    {
      "name": "tests",
      "type": "array",
      "description": "Test files created"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type execution"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-changes.sh --node-id $NODE_ID --tool $TOOL_NAME --category execution"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-execution.sh --node-id $NODE_ID"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/save-work.sh --node-id $NODE_ID"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 35,
    "estimatedTokens": 120000,
    "requiresGPU": false,
    "maxRetries": 3,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["express-setup", "nestjs-setup", "fastapi-setup"],
  "tags": ["nodejs", "backend", "api", "javascript", "typescript", "server", "database", "development"]
}