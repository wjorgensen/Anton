{
  "id": "database-developer",
  "name": "Database Developer Agent",
  "category": "execution",
  "type": "database-developer",
  "version": "1.0.0",
  "description": "Specialized agent for developing database schemas, queries, migrations, and optimizations with SQL/NoSQL databases and best practices",
  "icon": "database",
  "color": "#336791",
  "instructions": {
    "base": "You are an expert database developer. Your role is to design and implement database schemas, write efficient queries, create migrations, optimize performance, and manage data integrity using SQL and NoSQL databases with best practices.",
    "contextual": "Implement the following database feature: {{featureDescription}}. Requirements: {{requirements}}. Database: {{database}}. ORM: {{orm}}. Follow database design principles and optimization techniques."
  },
  "claudeMD": "# Database Developer Agent\n\nExpert in database development with:\n- SQL databases (PostgreSQL, MySQL, SQLite)\n- NoSQL databases (MongoDB, Redis, Cassandra)\n- ORM integration (Prisma, TypeORM, Sequelize)\n- Query optimization and indexing\n- Database migrations and versioning\n- Data modeling and normalization\n- Performance monitoring\n- Backup and recovery strategies\n\n## Core Competencies\n- Schema design and modeling\n- Complex query writing and optimization\n- Index strategy and performance tuning\n- Migration planning and execution\n- Data validation and constraints\n- Transaction management\n- Database security practices\n- Monitoring and alerting\n\n## Development Standards\n- Follow database normalization principles\n- Implement proper indexing strategies\n- Use parameterized queries\n- Write efficient migrations\n- Document schema changes\n- Monitor query performance",
  "inputs": [
    {
      "name": "featureDescription",
      "type": "string",
      "required": true,
      "description": "Description of the database feature to implement"
    },
    {
      "name": "requirements",
      "type": "array",
      "required": true,
      "description": "List of specific requirements for the feature"
    },
    {
      "name": "database",
      "type": "string",
      "required": false,
      "description": "Database type (postgres, mysql, mongodb, redis, sqlite)",
      "default": "postgres"
    },
    {
      "name": "orm",
      "type": "string",
      "required": false,
      "description": "ORM/ODM tool (prisma, typeorm, sequelize, mongoose, sqlalchemy)",
      "default": "prisma"
    },
    {
      "name": "migrationTool",
      "type": "string",
      "required": false,
      "description": "Migration tool (prisma-migrate, flyway, liquibase, alembic)",
      "default": "prisma-migrate"
    },
    {
      "name": "targetFiles",
      "type": "array",
      "required": false,
      "description": "Specific files to modify or create"
    }
  ],
  "outputs": [
    {
      "name": "implementedFiles",
      "type": "array",
      "description": "List of files created or modified"
    },
    {
      "name": "schemas",
      "type": "array",
      "description": "Database schemas created or modified"
    },
    {
      "name": "migrations",
      "type": "array",
      "description": "Database migration files created"
    },
    {
      "name": "queries",
      "type": "array",
      "description": "SQL queries and procedures implemented"
    },
    {
      "name": "indexes",
      "type": "array",
      "description": "Database indexes created"
    },
    {
      "name": "tests",
      "type": "array",
      "description": "Database test files created"
    },
    {
      "name": "documentation",
      "type": "string",
      "description": "Documentation of database changes"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type execution"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-changes.sh --node-id $NODE_ID --tool $TOOL_NAME --category execution"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/sync-preview.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-execution.sh --node-id $NODE_ID --command $COMMAND"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/save-work.sh --node-id $NODE_ID --context-reset true"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/handle-notification.sh --node-id $NODE_ID --type execution"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 40,
    "estimatedTokens": 130000,
    "requiresGPU": false,
    "maxRetries": 3,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["postgres-setup", "prisma-setup", "mongodb-setup", "redis-setup"],
  "tags": ["database", "sql", "nosql", "migrations", "queries", "optimization", "schema", "development"]
}