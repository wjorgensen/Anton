{
  "id": "react-developer",
  "name": "React Developer Agent",
  "category": "execution",
  "type": "react-developer",
  "version": "1.0.0",
  "description": "Specialized agent for developing React components, features, and applications with modern patterns, hooks, and best practices",
  "icon": "react",
  "color": "#61DAFB",
  "instructions": {
    "base": "You are an expert React developer. Your role is to implement React components, features, and business logic following modern React patterns, hooks, performance optimization, and accessibility best practices. You write clean, maintainable, and testable code.",
    "contextual": "Implement the following React feature: {{featureDescription}}. Requirements: {{requirements}}. Use existing components from: {{componentLibrary}}. Follow the project's coding standards and patterns."
  },
  "claudeMD": "# React Developer Agent\n\nExpert in React development with:\n- React 18+ features (Suspense, Concurrent Mode, Server Components)\n- Custom hooks development\n- Component composition patterns\n- State management integration\n- Performance optimization\n- Accessibility (a11y) compliance\n- Testing with React Testing Library\n\n## Core Competencies\n- Functional components with hooks\n- Custom hook development\n- Context API usage\n- Memo, useMemo, useCallback optimization\n- Error boundaries\n- Code splitting and lazy loading\n- Form handling\n- Data fetching patterns\n\n## Development Standards\n- Follow existing component patterns\n- Implement proper TypeScript types\n- Write unit tests for components\n- Ensure accessibility compliance\n- Optimize bundle size\n- Document props with JSDoc",
  "inputs": [
    {
      "name": "featureDescription",
      "type": "string",
      "required": true,
      "description": "Description of the React feature to implement"
    },
    {
      "name": "requirements",
      "type": "array",
      "required": true,
      "description": "List of specific requirements for the feature"
    },
    {
      "name": "componentLibrary",
      "type": "string",
      "required": false,
      "description": "UI component library being used (mui, antd, chakra, custom)",
      "default": "custom"
    },
    {
      "name": "targetFiles",
      "type": "array",
      "required": false,
      "description": "Specific files to modify or create"
    },
    {
      "name": "dependencies",
      "type": "object",
      "required": false,
      "description": "External dependencies needed for the feature"
    }
  ],
  "outputs": [
    {
      "name": "implementedFiles",
      "type": "array",
      "description": "List of files created or modified"
    },
    {
      "name": "components",
      "type": "array",
      "description": "List of React components created"
    },
    {
      "name": "hooks",
      "type": "array",
      "description": "Custom hooks developed"
    },
    {
      "name": "tests",
      "type": "array",
      "description": "Test files created"
    },
    {
      "name": "documentation",
      "type": "string",
      "description": "Documentation of implemented features"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type execution"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-changes.sh --node-id $NODE_ID --tool $TOOL_NAME --category execution"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/sync-preview.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-execution.sh --node-id $NODE_ID --command $COMMAND"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/save-work.sh --node-id $NODE_ID --context-reset true"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/handle-notification.sh --node-id $NODE_ID --type execution"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 30,
    "estimatedTokens": 100000,
    "requiresGPU": false,
    "maxRetries": 3,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["nextjs-setup", "vite-react-setup"],
  "tags": ["react", "frontend", "javascript", "typescript", "components", "hooks", "ui", "development"]
}