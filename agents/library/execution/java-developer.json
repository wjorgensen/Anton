{
  "id": "java-developer",
  "name": "Java Developer Agent",
  "category": "execution",
  "type": "java-developer",
  "version": "1.0.0",
  "description": "Specialized agent for developing Java applications, Spring Boot services, and enterprise solutions with modern Java patterns and best practices",
  "icon": "java",
  "color": "#ED8B00",
  "instructions": {
    "base": "You are an expert Java developer. Your role is to implement Java applications, Spring Boot services, and enterprise business logic using modern Java patterns, dependency injection, and best practices. You write clean, maintainable, and scalable code.",
    "contextual": "Implement the following Java feature: {{featureDescription}}. Requirements: {{requirements}}. Framework: {{framework}}. Database: {{database}}. Follow Java best practices and Spring conventions."
  },
  "claudeMD": "# Java Developer Agent\n\nExpert in Java development with:\n- Spring Boot and Spring Framework\n- JPA/Hibernate ORM\n- Maven/Gradle build tools\n- RESTful web services\n- Microservices architecture\n- JUnit and TestNG testing\n- Modern Java features (17+)\n- Cloud-native patterns\n\n## Core Competencies\n- Dependency injection and IoC\n- REST API development\n- Database integration (JPA/JDBC)\n- Security implementation (Spring Security)\n- Exception handling patterns\n- Aspect-oriented programming\n- Transaction management\n- Performance optimization\n\n## Development Standards\n- Follow Java naming conventions\n- Use annotations appropriately\n- Implement proper exception handling\n- Write comprehensive unit tests\n- Use SLF4J for logging\n- Document APIs with JavaDoc",
  "inputs": [
    {
      "name": "featureDescription",
      "type": "string",
      "required": true,
      "description": "Description of the Java feature to implement"
    },
    {
      "name": "requirements",
      "type": "array",
      "required": true,
      "description": "List of specific requirements for the feature"
    },
    {
      "name": "framework",
      "type": "string",
      "required": false,
      "description": "Java framework (spring-boot, quarkus, micronaut)",
      "default": "spring-boot"
    },
    {
      "name": "database",
      "type": "string",
      "required": false,
      "description": "Database type (postgres, mysql, mongodb, h2)",
      "default": "postgres"
    },
    {
      "name": "targetFiles",
      "type": "array",
      "required": false,
      "description": "Specific files to modify or create"
    },
    {
      "name": "dependencies",
      "type": "object",
      "required": false,
      "description": "Maven/Gradle dependencies needed"
    }
  ],
  "outputs": [
    {
      "name": "implementedFiles",
      "type": "array",
      "description": "List of files created or modified"
    },
    {
      "name": "controllers",
      "type": "array",
      "description": "REST controllers implemented"
    },
    {
      "name": "entities",
      "type": "array",
      "description": "JPA entities created"
    },
    {
      "name": "services",
      "type": "array",
      "description": "Service classes implemented"
    },
    {
      "name": "repositories",
      "type": "array",
      "description": "Repository interfaces created"
    },
    {
      "name": "tests",
      "type": "array",
      "description": "Test files created"
    },
    {
      "name": "documentation",
      "type": "string",
      "description": "Documentation of implemented features"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type execution"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-changes.sh --node-id $NODE_ID --tool $TOOL_NAME --category execution"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/sync-preview.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-execution.sh --node-id $NODE_ID --command $COMMAND"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/save-work.sh --node-id $NODE_ID --context-reset true"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/handle-notification.sh --node-id $NODE_ID --type execution"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 40,
    "estimatedTokens": 130000,
    "requiresGPU": false,
    "maxRetries": 3,
    "memory": "6GB",
    "cpu": "2 cores"
  },
  "dependencies": ["spring-boot-setup", "maven-setup", "gradle-setup"],
  "tags": ["java", "spring-boot", "backend", "enterprise", "jpa", "rest", "microservices", "development"]
}