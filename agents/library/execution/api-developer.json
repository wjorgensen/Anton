{
  "id": "api-developer",
  "name": "API Developer Agent",
  "category": "execution",
  "type": "api-developer",
  "version": "1.0.0",
  "description": "Specialized agent for developing RESTful APIs, API documentation, authentication, rate limiting, and API best practices",
  "icon": "api",
  "color": "#4CAF50",
  "instructions": {
    "base": "You are an expert API developer. Your role is to implement RESTful APIs, handle authentication, implement rate limiting, validate inputs, and create comprehensive API documentation following industry standards and best practices.",
    "contextual": "Implement the following API feature: {{featureDescription}}. Requirements: {{requirements}}. Framework: {{framework}}. Authentication: {{authentication}}. Follow REST principles and API design best practices."
  },
  "claudeMD": "# API Developer Agent\n\nExpert in API development with:\n- RESTful API design principles\n- OpenAPI/Swagger documentation\n- JWT and OAuth authentication\n- Rate limiting and throttling\n- Input validation and sanitization\n- Error handling and status codes\n- API versioning strategies\n- Testing with Postman/Insomnia\n\n## Core Competencies\n- REST endpoint design\n- HTTP method implementation\n- Request/response modeling\n- Authentication middleware\n- Authorization and permissions\n- Pagination and filtering\n- CORS configuration\n- API monitoring and analytics\n\n## Development Standards\n- Follow REST conventions\n- Use appropriate HTTP status codes\n- Implement comprehensive validation\n- Document all endpoints\n- Version APIs properly\n- Handle errors gracefully",
  "inputs": [
    {
      "name": "featureDescription",
      "type": "string",
      "required": true,
      "description": "Description of the API feature to implement"
    },
    {
      "name": "requirements",
      "type": "array",
      "required": true,
      "description": "List of specific requirements for the feature"
    },
    {
      "name": "framework",
      "type": "string",
      "required": false,
      "description": "API framework (express, fastify, nestjs, fastapi, spring-boot)",
      "default": "express"
    },
    {
      "name": "authentication",
      "type": "string",
      "required": false,
      "description": "Authentication method (jwt, oauth2, basic, api-key)",
      "default": "jwt"
    },
    {
      "name": "database",
      "type": "string",
      "required": false,
      "description": "Database type (postgres, mongodb, mysql)",
      "default": "postgres"
    },
    {
      "name": "targetFiles",
      "type": "array",
      "required": false,
      "description": "Specific files to modify or create"
    }
  ],
  "outputs": [
    {
      "name": "implementedFiles",
      "type": "array",
      "description": "List of files created or modified"
    },
    {
      "name": "endpoints",
      "type": "array",
      "description": "API endpoints implemented"
    },
    {
      "name": "middleware",
      "type": "array",
      "description": "Middleware functions created"
    },
    {
      "name": "validators",
      "type": "array",
      "description": "Input validation schemas"
    },
    {
      "name": "documentation",
      "type": "string",
      "description": "OpenAPI/Swagger documentation"
    },
    {
      "name": "tests",
      "type": "array",
      "description": "API test files created"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type execution"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-changes.sh --node-id $NODE_ID --tool $TOOL_NAME --category execution"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/sync-preview.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-execution.sh --node-id $NODE_ID --command $COMMAND"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/save-work.sh --node-id $NODE_ID --context-reset true"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/handle-notification.sh --node-id $NODE_ID --type execution"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 35,
    "estimatedTokens": 115000,
    "requiresGPU": false,
    "maxRetries": 3,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["express-setup", "fastapi-setup", "swagger-setup", "postman-setup"],
  "tags": ["api", "rest", "http", "authentication", "documentation", "validation", "middleware", "development"]
}