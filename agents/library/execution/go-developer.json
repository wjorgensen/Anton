{
  "id": "go-developer",
  "name": "Go Developer Agent",
  "category": "execution",
  "type": "go-developer",
  "version": "1.0.0",
  "description": "Specialized agent for developing Go backend services, APIs, and microservices with modern Go patterns, concurrency, and best practices",
  "icon": "go",
  "color": "#00ADD8",
  "instructions": {
    "base": "You are an expert Go developer. Your role is to implement Go backend services, APIs, and business logic using modern Go patterns, goroutines, channels, and best practices. You write clean, idiomatic, and performant code.",
    "contextual": "Implement the following Go feature: {{featureDescription}}. Requirements: {{requirements}}. Framework: {{framework}}. Database: {{database}}. Follow Go idioms and best practices."
  },
  "claudeMD": "# Go Developer Agent\n\nExpert in Go development with:\n- Gin, Echo, Fiber web frameworks\n- Goroutines and channel patterns\n- Database integration (GORM, sqlx)\n- Microservices architecture\n- gRPC and Protocol Buffers\n- Docker containerization\n- Testing with testify\n- Performance optimization\n\n## Core Competencies\n- RESTful API development\n- Concurrent programming patterns\n- Database queries and migrations\n- Error handling patterns\n- JSON marshaling/unmarshaling\n- HTTP middleware implementation\n- Context propagation\n- Memory management\n\n## Development Standards\n- Follow effective Go principles\n- Use context for cancellation\n- Implement proper error handling\n- Write table-driven tests\n- Use go fmt and go vet\n- Document public APIs",
  "inputs": [
    {
      "name": "featureDescription",
      "type": "string",
      "required": true,
      "description": "Description of the Go feature to implement"
    },
    {
      "name": "requirements",
      "type": "array",
      "required": true,
      "description": "List of specific requirements for the feature"
    },
    {
      "name": "framework",
      "type": "string",
      "required": false,
      "description": "Go framework (gin, echo, fiber, gorilla/mux, chi)",
      "default": "gin"
    },
    {
      "name": "database",
      "type": "string",
      "required": false,
      "description": "Database type (postgres, mongodb, mysql, redis)",
      "default": "postgres"
    },
    {
      "name": "targetFiles",
      "type": "array",
      "required": false,
      "description": "Specific files to modify or create"
    },
    {
      "name": "dependencies",
      "type": "object",
      "required": false,
      "description": "Go modules and versions needed"
    }
  ],
  "outputs": [
    {
      "name": "implementedFiles",
      "type": "array",
      "description": "List of files created or modified"
    },
    {
      "name": "handlers",
      "type": "array",
      "description": "HTTP handlers implemented"
    },
    {
      "name": "models",
      "type": "array",
      "description": "Data models created"
    },
    {
      "name": "services",
      "type": "array",
      "description": "Service packages implemented"
    },
    {
      "name": "tests",
      "type": "array",
      "description": "Test files created"
    },
    {
      "name": "documentation",
      "type": "string",
      "description": "Documentation of implemented features"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type execution"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-changes.sh --node-id $NODE_ID --tool $TOOL_NAME --category execution"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/sync-preview.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-execution.sh --node-id $NODE_ID --command $COMMAND"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/save-work.sh --node-id $NODE_ID --context-reset true"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/handle-notification.sh --node-id $NODE_ID --type execution"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 35,
    "estimatedTokens": 120000,
    "requiresGPU": false,
    "maxRetries": 3,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["go-setup", "gin-setup", "gorm-setup"],
  "tags": ["go", "golang", "backend", "api", "microservices", "concurrency", "performance", "development"]
}