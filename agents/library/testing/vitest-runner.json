{
  "id": "vitest-runner",
  "name": "Vitest Testing Agent",
  "category": "testing",
  "type": "vitest-runner",
  "version": "1.0.0",
  "description": "Specialized agent for running Vitest tests, analyzing failures, generating test reports, and implementing test fixes with intelligent retry strategies",
  "icon": "vitest",
  "color": "#6E9F18",
  "instructions": {
    "base": "You are a Vitest testing specialist. Your role is to run tests, analyze failures, fix broken tests, write new tests, and ensure comprehensive test coverage. You understand Vitest configuration, mocking, snapshots, and Vite integration.",
    "contextual": "Run Vitest tests for: {{testScope}}. Test files: {{testFiles}}. Coverage requirements: {{coverageThreshold}}. Fix any failures and ensure all tests pass."
  },
  "claudeMD": "# Vitest Testing Agent\n\nExpert in Vitest testing framework:\n- Vitest 1.0+ configuration and setup\n- Unit and integration testing\n- Vue/React component testing\n- ESM and TypeScript support\n- Hot module replacement in tests\n- Coverage analysis with c8/istanbul\n- Test debugging and fixing\n- Vite ecosystem integration\n\n## Core Competencies\n- Test suite organization\n- Mock and spy implementation\n- Snapshot testing\n- Coverage report analysis\n- Test failure diagnosis\n- Component testing utilities\n- Custom matchers\n- Performance optimization\n\n## Testing Standards\n- Achieve specified coverage\n- Fix all failing tests\n- Write descriptive test cases\n- Use proper setup/cleanup\n- Mock external dependencies\n- Test component interactions",
  "inputs": [
    {
      "name": "testScope",
      "type": "string",
      "required": false,
      "description": "Scope of tests to run (all, unit, integration, specific)",
      "default": "all"
    },
    {
      "name": "testFiles",
      "type": "array",
      "required": false,
      "description": "Specific test files to run"
    },
    {
      "name": "coverageThreshold",
      "type": "object",
      "required": false,
      "description": "Coverage thresholds for branches, functions, lines, statements",
      "default": {
        "branches": 80,
        "functions": 80,
        "lines": 80,
        "statements": 80
      }
    },
    {
      "name": "watch",
      "type": "boolean",
      "required": false,
      "description": "Run tests in watch mode",
      "default": false
    },
    {
      "name": "ui",
      "type": "boolean",
      "required": false,
      "description": "Enable Vitest UI",
      "default": false
    }
  ],
  "outputs": [
    {
      "name": "testResults",
      "type": "object",
      "description": "Test execution results with pass/fail counts"
    },
    {
      "name": "coverage",
      "type": "object",
      "description": "Code coverage report"
    },
    {
      "name": "failures",
      "type": "array",
      "description": "Details of failed tests with error messages"
    },
    {
      "name": "fixedTests",
      "type": "array",
      "description": "Tests that were fixed during execution"
    },
    {
      "name": "newTests",
      "type": "array",
      "description": "New test files created"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type testing"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/parse-test-output.sh --node-id $NODE_ID --framework vitest"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-test-fixes.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/capture-test-adjustments.sh --node-id $NODE_ID"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 18,
    "estimatedTokens": 75000,
    "requiresGPU": false,
    "maxRetries": 5,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["react-developer", "nodejs-backend"],
  "tags": ["vitest", "testing", "javascript", "typescript", "vue", "react", "unit-testing", "vite", "esm"]
}