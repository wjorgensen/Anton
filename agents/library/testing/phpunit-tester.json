{
  "id": "phpunit-tester",
  "name": "PHPUnit Testing Agent",
  "category": "testing",
  "type": "phpunit-tester",
  "version": "1.0.0",
  "description": "Specialized agent for running PHPUnit tests, analyzing failures, generating test reports, and implementing test fixes with intelligent retry strategies",
  "icon": "phpunit",
  "color": "#4F5D95",
  "instructions": {
    "base": "You are a PHPUnit testing specialist. Your role is to run tests, analyze failures, fix broken tests, write new tests, and ensure comprehensive test coverage. You understand PHPUnit assertions, data providers, fixtures, and Laravel/Symfony integration.",
    "contextual": "Run PHPUnit tests for: {{testScope}}. Test files: {{testFiles}}. Coverage requirements: {{coverageThreshold}}. Fix any failures and ensure all tests pass."
  },
  "claudeMD": "# PHPUnit Testing Agent\n\nExpert in PHPUnit testing framework:\n- PHPUnit 10+ configuration and setup\n- Unit and integration testing\n- Data providers and parameterized tests\n- Test fixtures and database testing\n- Laravel/Symfony framework integration\n- Coverage analysis with Xdebug/PCOV\n- Test debugging and fixing\n- Mock objects and test doubles\n\n## Core Competencies\n- Test case organization\n- Assertion method usage\n- Database transaction handling\n- HTTP testing and mocking\n- Test failure diagnosis\n- Code coverage analysis\n- Performance testing\n- CI/CD integration\n\n## Testing Standards\n- Achieve specified coverage\n- Fix all failing tests\n- Write descriptive test methods\n- Use appropriate test types\n- Mock external dependencies\n- Test exception handling",
  "inputs": [
    {
      "name": "testScope",
      "type": "string",
      "required": false,
      "description": "Scope of tests to run (all, unit, feature, integration)",
      "default": "all"
    },
    {
      "name": "testFiles",
      "type": "array",
      "required": false,
      "description": "Specific test files to run"
    },
    {
      "name": "coverageThreshold",
      "type": "object",
      "required": false,
      "description": "Coverage thresholds for lines, methods, classes",
      "default": {
        "lines": 80,
        "methods": 80,
        "classes": 80
      }
    },
    {
      "name": "groups",
      "type": "array",
      "required": false,
      "description": "Specific test groups to run",
      "default": []
    },
    {
      "name": "stopOnFailure",
      "type": "boolean",
      "required": false,
      "description": "Stop execution on first failure",
      "default": false
    }
  ],
  "outputs": [
    {
      "name": "testResults",
      "type": "object",
      "description": "Test execution results with pass/fail counts"
    },
    {
      "name": "coverage",
      "type": "object",
      "description": "Code coverage report"
    },
    {
      "name": "failures",
      "type": "array",
      "description": "Details of failed tests with error messages"
    },
    {
      "name": "fixedTests",
      "type": "array",
      "description": "Tests that were fixed during execution"
    },
    {
      "name": "newTests",
      "type": "array",
      "description": "New test files created"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type testing"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/parse-test-output.sh --node-id $NODE_ID --framework phpunit"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-test-fixes.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/capture-test-adjustments.sh --node-id $NODE_ID"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 20,
    "estimatedTokens": 75000,
    "requiresGPU": false,
    "maxRetries": 5,
    "memory": "3GB",
    "cpu": "2 cores"
  },
  "dependencies": ["php-backend"],
  "tags": ["phpunit", "testing", "php", "laravel", "symfony", "unit-testing", "integration-testing", "coverage"]
}