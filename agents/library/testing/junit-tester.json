{
  "id": "junit-tester",
  "name": "JUnit Testing Agent",
  "category": "testing",
  "type": "junit-tester",
  "version": "1.0.0",
  "description": "Specialized agent for running JUnit tests, analyzing failures, generating test reports, and implementing test fixes with intelligent retry strategies",
  "icon": "junit",
  "color": "#25A162",
  "instructions": {
    "base": "You are a JUnit testing specialist. Your role is to run tests, analyze failures, fix broken tests, write new tests, and ensure comprehensive test coverage. You understand JUnit 5 annotations, parameterized tests, test lifecycle, and Maven/Gradle integration.",
    "contextual": "Run JUnit tests for: {{testScope}}. Test classes: {{testClasses}}. Coverage requirements: {{coverageThreshold}}. Fix any failures and ensure all tests pass."
  },
  "claudeMD": "# JUnit Testing Agent\n\nExpert in JUnit testing framework:\n- JUnit 5+ (Jupiter) configuration and setup\n- Unit and integration testing\n- Parameterized and dynamic tests\n- Test lifecycle management\n- Mockito integration for mocking\n- Coverage analysis with JaCoCo\n- Test debugging and fixing\n- Maven/Gradle build integration\n\n## Core Competencies\n- Test class organization\n- Annotation usage (@Test, @BeforeEach, etc.)\n- Assertion library usage\n- Parameterized test implementation\n- Test failure diagnosis\n- Mock object creation\n- Test suite configuration\n- CI/CD integration\n\n## Testing Standards\n- Achieve specified coverage\n- Fix all failing tests\n- Write descriptive test methods\n- Use appropriate test lifecycle\n- Mock external dependencies\n- Test exception scenarios",
  "inputs": [
    {
      "name": "testScope",
      "type": "string",
      "required": false,
      "description": "Scope of tests to run (all, unit, integration, specific)",
      "default": "all"
    },
    {
      "name": "testClasses",
      "type": "array",
      "required": false,
      "description": "Specific test classes to run"
    },
    {
      "name": "coverageThreshold",
      "type": "object",
      "required": false,
      "description": "Coverage thresholds for branches, lines, classes, methods",
      "default": {
        "branches": 80,
        "lines": 80,
        "classes": 80,
        "methods": 80
      }
    },
    {
      "name": "parallel",
      "type": "boolean",
      "required": false,
      "description": "Enable parallel test execution",
      "default": false
    },
    {
      "name": "tags",
      "type": "array",
      "required": false,
      "description": "Specific test tags to run",
      "default": []
    }
  ],
  "outputs": [
    {
      "name": "testResults",
      "type": "object",
      "description": "Test execution results with pass/fail counts"
    },
    {
      "name": "coverage",
      "type": "object",
      "description": "Code coverage report"
    },
    {
      "name": "failures",
      "type": "array",
      "description": "Details of failed tests with error messages and stack traces"
    },
    {
      "name": "fixedTests",
      "type": "array",
      "description": "Tests that were fixed during execution"
    },
    {
      "name": "newTests",
      "type": "array",
      "description": "New test classes created"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type testing"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/parse-test-output.sh --node-id $NODE_ID --framework junit"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-test-fixes.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/capture-test-adjustments.sh --node-id $NODE_ID"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 20,
    "estimatedTokens": 80000,
    "requiresGPU": false,
    "maxRetries": 5,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["java-backend"],
  "tags": ["junit", "testing", "java", "unit-testing", "integration-testing", "mockito", "maven", "gradle"]
}