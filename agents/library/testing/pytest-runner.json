{
  "id": "pytest-runner",
  "name": "Pytest Testing Agent",
  "category": "testing",
  "type": "pytest-runner",
  "version": "1.0.0",
  "description": "Specialized agent for running pytest tests, analyzing failures, generating test reports, and implementing test fixes with intelligent retry strategies",
  "icon": "pytest",
  "color": "#0A9EDC",
  "instructions": {
    "base": "You are a pytest testing specialist. Your role is to run tests, analyze failures, fix broken tests, write new tests, and ensure comprehensive test coverage. You understand pytest configuration, fixtures, parameterization, and pytest plugins.",
    "contextual": "Run pytest tests for: {{testScope}}. Test files: {{testFiles}}. Coverage requirements: {{coverageThreshold}}. Fix any failures and ensure all tests pass."
  },
  "claudeMD": "# Pytest Testing Agent\n\nExpert in pytest testing framework:\n- Pytest 7+ configuration and setup\n- Unit and integration testing\n- Fixture management and dependency injection\n- Parameterized testing\n- Test discovery and collection\n- Coverage analysis with pytest-cov\n- Test debugging and fixing\n- Plugin ecosystem integration\n\n## Core Competencies\n- Test suite organization\n- Fixture scoping and teardown\n- Parametrized test implementation\n- Coverage report analysis\n- Test failure diagnosis\n- Mock and patch usage\n- Custom pytest plugins\n- Test performance optimization\n\n## Testing Standards\n- Achieve specified coverage\n- Fix all failing tests\n- Write descriptive test names\n- Use appropriate fixtures\n- Mock external dependencies\n- Test edge cases and error conditions",
  "inputs": [
    {
      "name": "testScope",
      "type": "string",
      "required": false,
      "description": "Scope of tests to run (all, unit, integration, specific)",
      "default": "all"
    },
    {
      "name": "testFiles",
      "type": "array",
      "required": false,
      "description": "Specific test files to run"
    },
    {
      "name": "coverageThreshold",
      "type": "object",
      "required": false,
      "description": "Coverage thresholds for branches, functions, lines, statements",
      "default": {
        "branches": 80,
        "functions": 80,
        "lines": 80,
        "statements": 80
      }
    },
    {
      "name": "markers",
      "type": "array",
      "required": false,
      "description": "Specific pytest markers to run",
      "default": []
    },
    {
      "name": "verbose",
      "type": "boolean",
      "required": false,
      "description": "Run tests in verbose mode",
      "default": false
    }
  ],
  "outputs": [
    {
      "name": "testResults",
      "type": "object",
      "description": "Test execution results with pass/fail counts"
    },
    {
      "name": "coverage",
      "type": "object",
      "description": "Code coverage report"
    },
    {
      "name": "failures",
      "type": "array",
      "description": "Details of failed tests with error messages"
    },
    {
      "name": "fixedTests",
      "type": "array",
      "description": "Tests that were fixed during execution"
    },
    {
      "name": "newTests",
      "type": "array",
      "description": "New test files created"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type testing"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/parse-test-output.sh --node-id $NODE_ID --framework pytest"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-test-fixes.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/capture-test-adjustments.sh --node-id $NODE_ID"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 25,
    "estimatedTokens": 85000,
    "requiresGPU": false,
    "maxRetries": 5,
    "memory": "4GB",
    "cpu": "2 cores"
  },
  "dependencies": ["python-backend"],
  "tags": ["pytest", "testing", "python", "unit-testing", "integration-testing", "coverage", "tdd", "fixtures"]
}