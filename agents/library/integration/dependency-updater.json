{
  "id": "dependency-updater",
  "name": "Dependency Update Agent",
  "category": "integration",
  "type": "dependency-updater",
  "version": "1.0.0",
  "description": "Specialized agent for package dependency updates, vulnerability scanning, compatibility checking, and automated maintenance",
  "icon": "package",
  "color": "#F59E0B",
  "instructions": {
    "base": "You are a dependency management specialist. Your role is to update package dependencies, scan for vulnerabilities, check compatibility, manage version conflicts, and maintain project health. You understand various package managers and update strategies.",
    "contextual": "Perform dependency update: {{operation}}. Package manager: {{packageManager}}. Update type: {{updateType}}. Scope: {{updateScope}}. Security focus: {{securityFocus}}."
  },
  "claudeMD": "# Dependency Update Agent\n\nExpert in dependency management and updates:\n- Package version management\n- Vulnerability scanning and remediation\n- Compatibility testing\n- Automated security updates\n- Breaking change detection\n- Dependency conflict resolution\n- Lock file management\n- Update strategy optimization\n\n## Core Competencies\n- Multi-package manager support\n- Semantic version analysis\n- Security advisory monitoring\n- Automated testing integration\n- Rollback procedures\n- Update scheduling\n- Risk assessment\n- Documentation generation\n\n## Integration Standards\n- Follow semantic versioning principles\n- Prioritize security updates\n- Test updates thoroughly\n- Maintain compatibility\n- Document breaking changes\n- Implement gradual rollout strategies",
  "inputs": [
    {
      "name": "operation",
      "type": "string",
      "required": true,
      "description": "Update operation to perform (update, scan, audit, rollback)"
    },
    {
      "name": "packageManager",
      "type": "string",
      "required": false,
      "description": "Package manager to use (npm, yarn, pip, composer, maven)",
      "default": "npm"
    },
    {
      "name": "updateType",
      "type": "string",
      "required": false,
      "description": "Type of update (security, major, minor, patch, all)",
      "default": "security"
    },
    {
      "name": "updateScope",
      "type": "string",
      "required": false,
      "description": "Scope of updates (all, production, development, specific)",
      "default": "all"
    },
    {
      "name": "securityFocus",
      "type": "boolean",
      "required": false,
      "description": "Whether to prioritize security updates",
      "default": true
    },
    {
      "name": "testAfterUpdate",
      "type": "boolean",
      "required": false,
      "description": "Whether to run tests after updates",
      "default": true
    }
  ],
  "outputs": [
    {
      "name": "updateStatus",
      "type": "object",
      "description": "Status of the dependency update operation"
    },
    {
      "name": "updatedPackages",
      "type": "array",
      "description": "List of packages that were updated"
    },
    {
      "name": "vulnerabilities",
      "type": "array",
      "description": "Security vulnerabilities found and addressed"
    },
    {
      "name": "breakingChanges",
      "type": "array",
      "description": "Potential breaking changes detected"
    },
    {
      "name": "testResults",
      "type": "object",
      "description": "Test results after dependency updates"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type integration"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-dependency-ops.sh --node-id $NODE_ID --operation $OPERATION"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-dependency-files.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/subagent-complete.sh --parent $NODE_ID --type dependency-update"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 10,
    "estimatedTokens": 40000,
    "requiresGPU": false,
    "maxRetries": 3,
    "memory": "2GB",
    "cpu": "2 cores"
  },
  "dependencies": [],
  "tags": ["dependencies", "packages", "updates", "security", "vulnerabilities", "maintenance", "compatibility", "automation"]
}