{
  "id": "ci-cd-runner",
  "name": "CI/CD Pipeline Runner",
  "category": "integration",
  "type": "ci-cd-runner",
  "version": "1.0.0",
  "description": "Specialized agent for CI/CD pipeline execution, workflow automation, testing orchestration, and deployment management",
  "icon": "workflow",
  "color": "#22C55E",
  "instructions": {
    "base": "You are a CI/CD pipeline specialist. Your role is to execute automated workflows, manage build processes, orchestrate testing, handle deployments, and monitor pipeline health. You understand various CI/CD platforms and best practices.",
    "contextual": "Execute CI/CD pipeline: {{operation}}. Pipeline: {{pipelineName}}. Environment: {{environment}}. Stage: {{stage}}. Trigger: {{triggerType}}."
  },
  "claudeMD": "# CI/CD Pipeline Runner\n\nExpert in continuous integration and deployment:\n- Pipeline configuration and execution\n- Automated testing orchestration\n- Build process optimization\n- Deployment automation\n- Environment management\n- Artifact management\n- Pipeline monitoring\n- Rollback procedures\n\n## Core Competencies\n- Multi-stage pipeline design\n- Parallel job execution\n- Test result aggregation\n- Deployment strategies (blue-green, canary)\n- Secret and credential management\n- Pipeline debugging and troubleshooting\n- Performance optimization\n- Integration with various platforms\n\n## Integration Standards\n- Follow CI/CD best practices\n- Implement proper testing stages\n- Ensure secure deployment processes\n- Maintain pipeline efficiency\n- Monitor pipeline performance\n- Handle failures gracefully",
  "inputs": [
    {
      "name": "operation",
      "type": "string",
      "required": true,
      "description": "CI/CD operation to perform (build, test, deploy, rollback, monitor)"
    },
    {
      "name": "pipelineName",
      "type": "string",
      "required": false,
      "description": "Name of the pipeline to execute"
    },
    {
      "name": "environment",
      "type": "string",
      "required": false,
      "description": "Target environment (development, staging, production)",
      "default": "development"
    },
    {
      "name": "stage",
      "type": "string",
      "required": false,
      "description": "Specific pipeline stage to execute"
    },
    {
      "name": "triggerType",
      "type": "string",
      "required": false,
      "description": "Pipeline trigger type (push, pr, schedule, manual)",
      "default": "manual"
    },
    {
      "name": "deploymentStrategy",
      "type": "string",
      "required": false,
      "description": "Deployment strategy (rolling, blue-green, canary)",
      "default": "rolling"
    }
  ],
  "outputs": [
    {
      "name": "pipelineStatus",
      "type": "object",
      "description": "Overall status of the pipeline execution"
    },
    {
      "name": "stageResults",
      "type": "array",
      "description": "Results from each pipeline stage"
    },
    {
      "name": "testResults",
      "type": "object",
      "description": "Aggregated test results and coverage"
    },
    {
      "name": "deploymentInfo",
      "type": "object",
      "description": "Deployment details and endpoints"
    },
    {
      "name": "artifacts",
      "type": "array",
      "description": "Generated artifacts and their locations"
    }
  ],
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/stop.sh --node-id $NODE_ID --status $STATUS --output-type integration"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/monitor-pipeline-ops.sh --node-id $NODE_ID --operation $OPERATION"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/track-pipeline-configs.sh --node-id $NODE_ID --file $FILE_PATH"
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/hooks/subagent-complete.sh --parent $NODE_ID --type cicd-pipeline"
          }
        ]
      }
    ]
  },
  "resources": {
    "estimatedTime": 20,
    "estimatedTokens": 65000,
    "requiresGPU": false,
    "maxRetries": 2,
    "memory": "3GB",
    "cpu": "4 cores"
  },
  "dependencies": [],
  "tags": ["cicd", "pipeline", "automation", "testing", "deployment", "workflow", "integration", "monitoring"]
}